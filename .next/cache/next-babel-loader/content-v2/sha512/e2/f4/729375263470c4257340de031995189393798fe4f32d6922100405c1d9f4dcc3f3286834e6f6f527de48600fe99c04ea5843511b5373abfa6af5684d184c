{"ast":null,"code":"import _defineProperty from \"C:/Users/ChrisLifts/source/repos/imfeelingbullish-next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"C:/Users/ChrisLifts/source/repos/imfeelingbullish-next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ChrisLifts\\\\source\\\\repos\\\\imfeelingbullish-next\\\\components\\\\coinGecko\\\\MarketTableRows.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Tbody, Td, Tr, Text } from '@chakra-ui/react';\nimport React from 'react';\n\nvar determineCellColour = function determineCellColour(cell) {\n  if (cell.column.id == 'dailyChange') {\n    return cell.value.includes('-') ? 'red.500' : 'green.500';\n  }\n\n  return 'gray.500';\n};\n\nvar MarketTableRows = function MarketTableRows(_ref) {\n  var data = _ref.data,\n      rows = _ref.rows,\n      prepareRow = _ref.prepareRow,\n      getTableBodyProps = _ref.getTableBodyProps,\n      rest = _objectWithoutProperties(_ref, [\"data\", \"rows\", \"prepareRow\", \"getTableBodyProps\"]);\n\n  return /*#__PURE__*/_jsxDEV(Tbody, _objectSpread(_objectSpread(_objectSpread({\n    id: \"markets\"\n  }, getTableBodyProps()), rest), {}, {\n    children: rows.map(function (row, i) {\n      prepareRow(row);\n      return /*#__PURE__*/_jsxDEV(Tr, _objectSpread(_objectSpread({\n        w: \"100%\"\n      }, row.getRowProps()), {}, {\n        children: row.cells.map(function (cell, cellIndex) {\n          return /*#__PURE__*/_jsxDEV(Td, _objectSpread(_objectSpread({\n            // maxW=\"20%\"\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            textAlign: \"center\",\n            textColor: determineCellColour(cell),\n            py: 2,\n            px: 0,\n            zIndex: 1\n          }, cell.getCellProps()), {}, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, _this)\n          }), cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, _this);\n        })\n      }), i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, _this);\n    })\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = MarketTableRows;\nexport default MarketTableRows;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketTableRows\");","map":{"version":3,"sources":["C:/Users/ChrisLifts/source/repos/imfeelingbullish-next/components/coinGecko/MarketTableRows.tsx"],"names":["Tbody","Td","Tr","Text","React","determineCellColour","cell","column","id","value","includes","MarketTableRows","data","rows","prepareRow","getTableBodyProps","rest","map","row","i","getRowProps","cells","cellIndex","getCellProps","render"],"mappings":";;;;;;;;;;;AAAA,SAAqBA,KAArB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,IAApC,QAAgD,kBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AASA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACpC,MAAIA,IAAI,CAACC,MAAL,CAAYC,EAAZ,IAAkB,aAAtB,EAAqC;AACnC,WAAOF,IAAI,CAACG,KAAL,CAAWC,QAAX,CAAoB,GAApB,IAA2B,SAA3B,GAAuC,WAA9C;AACD;;AACD,SAAO,UAAP;AACD,CALD;;AAOA,IAAMC,eAAqC,GAAG,SAAxCA,eAAwC,OAA4D;AAAA,MAAzDC,IAAyD,QAAzDA,IAAyD;AAAA,MAAnDC,IAAmD,QAAnDA,IAAmD;AAAA,MAA7CC,UAA6C,QAA7CA,UAA6C;AAAA,MAAjCC,iBAAiC,QAAjCA,iBAAiC;AAAA,MAAXC,IAAW;;AACxG,sBACE,QAAC,KAAD;AAAO,IAAA,EAAE,EAAC;AAAV,KAAwBD,iBAAiB,EAAzC,GAAiDC,IAAjD;AAAA,cACGH,IAAI,CAACI,GAAL,CAAS,UAACC,GAAD,EAAMC,CAAN,EAAY;AACpBL,MAAAA,UAAU,CAACI,GAAD,CAAV;AACA,0BACE,QAAC,EAAD;AAAY,QAAA,CAAC,EAAC;AAAd,SAAyBA,GAAG,CAACE,WAAJ,EAAzB;AAAA,kBACGF,GAAG,CAACG,KAAJ,CAAUJ,GAAV,CAAc,UAACX,IAAD,EAAOgB,SAAP,EAAqB;AAClC,8BACE,QAAC,EAAD;AAEE;AACA,YAAA,QAAQ,EAAC,QAHX;AAIE,YAAA,YAAY,EAAC,UAJf;AAKE,YAAA,SAAS,EAAC,QALZ;AAME,YAAA,SAAS,EAAEjB,mBAAmB,CAACC,IAAD,CANhC;AAOE,YAAA,EAAE,EAAE,CAPN;AAQE,YAAA,EAAE,EAAE,CARN;AASE,YAAA,MAAM,EAAE;AATV,aAUMA,IAAI,CAACiB,YAAL,EAVN;AAAA,mCAWE,QAAC,IAAD;AAAA,wBAAOjB,IAAI,CAACkB,MAAL,CAAY,MAAZ;AAAP;AAAA;AAAA;AAAA;AAAA;AAXF,cACOF,SADP;AAAA;AAAA;AAAA;AAAA,mBADF;AAeD,SAhBA;AADH,UAASH,CAAT;AAAA;AAAA;AAAA;AAAA,eADF;AAqBD,KAvBA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AA4BD,CA7BD;;KAAMR,e;AA+BN,eAAeA,eAAf","sourcesContent":["import { IconButton, Tbody, Td, Tr, Text } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ninterface ITableRows {\r\n  data: any;\r\n  rows: any;\r\n  prepareRow: (value) => void;\r\n  getTableBodyProps: () => void;\r\n}\r\n\r\nconst determineCellColour = (cell) => {\r\n  if (cell.column.id == 'dailyChange') {\r\n    return cell.value.includes('-') ? 'red.500' : 'green.500';\r\n  }\r\n  return 'gray.500';\r\n};\r\n\r\nconst MarketTableRows: React.FC<ITableRows> = ({ data, rows, prepareRow, getTableBodyProps, ...rest }) => {\r\n  return (\r\n    <Tbody id=\"markets\" {...getTableBodyProps()} {...rest}>\r\n      {rows.map((row, i) => {\r\n        prepareRow(row);\r\n        return (\r\n          <Tr key={i} w=\"100%\" {...row.getRowProps()}>\r\n            {row.cells.map((cell, cellIndex) => {\r\n              return (\r\n                <Td\r\n                  key={cellIndex}\r\n                  // maxW=\"20%\"\r\n                  overflow=\"hidden\"\r\n                  textOverflow=\"ellipsis\"\r\n                  textAlign=\"center\"\r\n                  textColor={determineCellColour(cell)}\r\n                  py={2}\r\n                  px={0}\r\n                  zIndex={1}\r\n                  {...cell.getCellProps()}>\r\n                  <Text>{cell.render('Cell')}</Text>\r\n                </Td>\r\n              );\r\n            })}\r\n          </Tr>\r\n        );\r\n      })}\r\n    </Tbody>\r\n  );\r\n};\r\n\r\nexport default MarketTableRows;\r\n"]},"metadata":{},"sourceType":"module"}